
C language doesnt support strings out of the box ==> an array of single characters
There are a number of C extension libraries that DO give you strings.

C knows to stop when it sees '\0' ==> sentinel character. We have to allow for an extra character in the array

LOVELY: The index is an offset: it's a measure of how far the character is from the first character. That's why we start from 0
It's better for the computer to calculate memory locations

Single quotes are used for individual characters, but double quotes are always used for strings

Difference between string literals and character arrays: literals are constants. if I try to change individual characters once created gcc will throw a bus error
They are stored in memory in a different way

block statements are groups of commands surrounded by braces.

The AND (&&) operator is efficient: if the first condition is false, then the computer wont bother evaluating the second condition

With OR (||) if the first condition is true, the computer wont bother evaluating the second condition.

In C boolean values are represented by numbers. The number 0 is false. Anything that is not equal to 0 is treated as true.

The & and | operators will ALWAYS EVALUATE both conditions, but && and || can often skip the second condition.

[23] Be the compiler
A- compiles. prints 'Small card'
B- compiles. prints nothing
C- compiles prints Ace!
D- doesnt compile

........
Switch statement can test for multiple values of a single variable

No, you cant use a switch statement to check a string of characters or any kind of array. The switch statement will only check a single value.

The main() function has an int return type so you should include a return statement when you get to the end. But if you leave the return statement out, the code will still compile - though you may get a warning from the compiler. A C99 compiler will insert a RETURN statement for you if you forget. Use -std=99 to compile to the C99 standard.

GCC: gnu compiler collection


SNAFU is an acronym that is widely used to stand for the sarcastic expression Situation Normal: All Fucked Up

Pointers is just the address of a piece of data in memory.
They are a form of indirection.


IF YOU WANT TO FIND OUT THE MEMORY ADDRESS OF THE VARIABLE YOU CAN USE THE $ OPERATOR:
printf("x is stored at %p\n", &x);

%p is used to format addresses.

evega@Esthers-MacBook-Pro headFirstC $ gcc memory.c -o memory && ./memory
x is stored at 0x7ffee3862a28
y is stored at 0x10c39e018

C sends arguments as VALUES
How can you ever write a function that updates a variable? ==> it's easy, use pointers.
Pass the address of the variable

Why are local variables stored in the stack and globals stored somewhere else: Local and global ariables are used differently. You will only ever get one copy of a global variable, but if you write a function that calls itself, you might get very many instances of the same local variable.
Pointers make it easier to share memory

int *address_of_x = &x; (this is a pointer for an address that stores an int)
int value_stored = *address_of_x; (when you have the memory address you want to read the data that is stored there using the * operator)

The * and & operators are opposites. The & operator takes a piece of data and tells you where it's stored. The * operator takes and address and tells you what's stored there.
Because pointers are sometimes called references, the * operator is said to DEREFERENCE a pointer.

To change the content of an address 
*address_of_x = 99;


variables are allocated storage in memory
local variables live in the stack
global variables live in the globals section
pointers are just variables that store memory addresses
The & operator finds the address of a variable
The * operator can read the contents of a memory address
The * operator can also set the contents of a memory address.

Pointers are actual numeric addresses in teh process memory

sizeof operator returned the size of a pointer to a string. On 32 bit operating system a pointer takes 4 bytes of memory and on 64 bit operative systems a pointer takes 8 bytes


....
An array variable can be used as a pointer
The array variable points to the first element in the array
If you declare an array argument to a function it will be treated as a pointer
The sizeof operator returns the space taken by a piede of data
you can also call size for a cata such as sizeof(int)
sizeof(apointer) returns 4 on 32 bit operating systems and 8 on 64-bit.

sizeof is not a function, is an operator
An operator is compiled to a sequence of instructions by the compiler.But if the code calls a function it has to jump to a separate piede of code

A pointer variable is just a variable storing a number living in memory

An array variable can be used as a pointer to the first element in an array.

WOW :))))))) DODGY
doses[3] == *(doses + 3) == *(3 + doses) == 3[doses]


Array variables can be used as pointers, but are not quite the same
sizeof is different for array and pointer variables
Array variables cant point to anything else
passing an array variable to a pointer decays it
Arrays start at zero because of pointer arithmetic
pointer variables have types so they can adjust pointer arithmetic


scanf("%39s", name); // scanf will read up to 39 characters plus the string terminator \0

scanf("%19s %i", first_name, age);

if you just use %s in scanf, there can be a problem if someone gets a little type-happy ==> Segmentation fault
If the scanf writes data beyong the end of the space allocated to the food array.
-------------------------------SCANF CAN CAUSE BUFFER OVERFLOWS--------------------------------
You might get lucky and the data will simply be stored and not cause any problems
But it's very likely that buffer overflow will cause bugs. It might be called a segmentation fault or an abor trap, but whatever the error message that appears, the result will be a crash.

FGETS as an alternative to SCANF
size is mandatory and INCLUDES the final \0
sizeof wont work if you pass a pointer. remember to give an explicit length then
gets has no limit at all. has been around for a long time but shouldnt be used

Scanf reads a string with %s and stops as soon as it hits a space. So if you want to enter more than one word you either have to call it more than once or use some fancy regular expression.

==> if you need to enter structured data with several fields ==> use SCANF
==> if you are entering a single unstructure string ==> fgets is the way to go

STRING LITERALS CAN NEVER BE UPDATED
A variable that points to a string literal cannot be used to change the contents of the string:
char *cards = "JQK"
but if you create an array from a string literal, then you can modify it:
char cards[] = "JQK"

STRINGS are loaded into the constants memory block. This section is read only. And *cards then a cards variable would be created in the stack

IF YOU ARE GOINT TO CHANGE A STRING MAKE A COPY
- what if cards is being declared as a function argument, it means that cards is a pointer.
=== void stack_deck(char cards[]) == void stack_deck(char *cards)

Best practices: never write code that sets a simple char pointer to a string literal value (char *s = "some string")
Trying to modify this would give you a headache.
Instead, if you set a pointer to a literal always make sure you use the CONST keyword, that way the compiler will complain beforehand
const char *s = "some things"

If you see a * in a variable declaration it means the variable will be a pointer
String literals are stored in read-only memory
If you want to modify a String you need to make a copy in a new array
You can declare a char pointer as const char* to prevent the code from using it to modify a string

STACK
HEAP
GLOBAL
CONSTANTS
CODE


STACK VS HEAP

&X returns the address of x
&x is called a pointer to x

...............................2.5 strings
string.h is part of the C standard library dedicated to string manipulation

strstr() ==> search within strings

Chances are you wont want to use the whole of the standard library at once, so the library is broken up into several sections and each one has a header file.

== stdio.h header file lets you use the standard input/output functions like printf and scanf
== stdlib.h ????
== string.h 

strchr() ==> find a char within a string
strcomp() ==> compare
strstr() ==> find a string within a string
strcpy() ==> copy
strlen() ==> find length
strcat() ==> concatenate two strings

	// strstr will search for the second string in the first string
	// returns 0 if no found
	strstr("dysfunctional", "fun");

// what happens when you read after the \0 in one of this strings?


man strstr()

https://stackoverflow.com/questions/21318269/bug-in-jukebox-code-head-first-c
The problem is that fgets stores the newline in the destination string. So your strstr needs to find "town\n". One solution would be to trim search_for after  fgets to get rid of the newline.

strstr(a,b) will return the address of string b in string a

...........................................................TOOLS............................................


	// REMEMBER SCANF ALWAYS USES POINTERS!!!!!!
	// The scanf() function returns the number of values it was able to read.
	while(scanf("%f, %f, %79[^\n]", &latitude, &longitude, info) == 3) 

Tools that read data line by line, process it and write it out again are called FILTER.
If you have a unix machine or you have installed cygwin on windows you already have a few filter tools installed:
- head: this tool displays the first few lines of a file
- tail: this flter displays the lines at the end of a file
- sed: the stream editor lets you do things like search and replace text.
you'll see later how to combine filters together to form filter chains.

 $ ./geo2json < gpsdata.csv > output.json



Invalid latitude: 423.623840
// This line display the number returned by the program when it finished
evega@Esthers-MacBook-Pro tools (master) $ echo $?
2
// In windows it's a bit different
C:\> echo %ERRORLEVEL%
2

printf() function sends data to the standard output. It is just a version of a more general function called fprintf()
fprintf() prints to a data stream


>> printf("I like Turtles!");
>> fprintf(stdout, "I like Turtles!");

>>> STDOUT vs STDERR (Standard error) >> use fprintf

fscanf() is the equivalent for scanf. You can specify the data stream


> REDIRECTS THE STANDARD OUPUT
2> REDIRECTS THE STANDARD ERROR
you could write geo2json 2> errors.txt

The printf() function sends data to the standard output
the standard output goes to the display by default
You can redirect the Standard Output to a file by using > on the command line
scanf() reads data from the standard input
the standard input reads data from the keyboard by default
you can redirect the standard input to read a file by using < on the command line
the standard error is reserved for outputting error messages
You an redirect the standard error using 2>

So, if two programs are piped together, does the first program hav to finish running before the second program can start?
NO, both of the programs will run at the same time, as output is produced by the first program, it can be consumed by the second program.

When the program runs, the operating system give sit three file data streams: The Standard Input, the Standard Output, and the Standard Error.

FILE *file = fopen(file_name, mode)
The mode is:
- "w" = write
- "r" = read
- "a" = append
fprintf(file, blablabla);
fscanf(file, "%79[^\n]\n", sentence);
fclose(file);


It depends on the OS but usually a process can have up to 256 data streams
FILE is uppercase cause it used to be defined using a macro


There are actually two forms of the main() function we can use, this is the second version:
int main(int argc, char *argv[])
C reads them as an array of character pointers to strings
argv[0] . The first argument is actually the name of the program being run.
argc value is a count of the number of elements in the array!!!


FILE *in;
if (!(in = fopen("dont_exist.txt", "r"))) {
	fprintf(stderr, "Can't open the file.\n");
	return 1;
}

In love <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 
The unistd.h header is not actually part of the standard C library. Instead it gives your programs access to some of the posix libraries.
POSIX was an attempt to create a common set of functions for use across all popular operating systems.

getopt() and each time you call it it returns the next option it finds on the command line

In order to avoid ambiguity (imagine you pass a negative number as a command line rguments) you can split your main arguments from the options using --. So you would write set_temperature -c -- -4 .
getopt will stop reading options when it sees the -- so the rest of the line will be read as simple arguents


Command line options are command line arguments prefixed with '-'
You define valid options by passing a string to getopt() like 'ae'
A ':' following an option in the string means that the option takes an additional argument
getopt() will record the options argument using the optarg variable
after you read all the options you should skip past them using the optind variable.


...........................................................MULTIPLE FILES............................................

Quick guide to data types:
- char: each character is just a number. ie: A == 65 (8 bits)
http://www.asciitable.com
- int: at least 16 bits (though it can vary) Numbers up to a few million
- short: usually about half the space of an int
- long: twice the memory of an int. At least 32 bits
- float: basic data for storing float point numbers
- double: up to twice the memory of a float. Larger andmore precise

%hi is the proper code to format a short value
%.2f formats a floating point number to 2 decimal places

Why did putting a large number into a short go negative?
The program stored just the RIGHTHANDSIDE of the number
SIGNED values in binary beginning with 1 in highest bit are treated as negative numbers.

If you divide integers you always get a rounded-off whole number.
You can put some other keywords before data types to change the way that the numbers are interpreted:
- unsigned: it will always be positive. from 0 to a maximum value that is about twice as large as the maximum number that can be stored inside an int. All data types are signed by default
- long: To make it even longer

Data types are different sizes on different platforms.

PARA SABER EL ESTANDARD DE C QUE ESTOY USANDO...........

evega@Esthers-MacBook-Pro multipleC (master) $ gcc -dM -E - < /dev/null | grep VERSION
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 101300
#define __GXX_ABI_VERSION 1002
#define __STDC_VERSION__ 201112L
#define __VERSION__ "4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.10.44.4)"


__STDC_VERSION__ == 199409L el estándar es C941.
__STDC_VERSION__ == 199901L el estándar es C99.
__STDC_VERSION__ == 201112L es estándar es C11.
Para otros estándares, se definen las macros de preprocesador:

__ANSI__ para ANSI C (C89 y C90)
__STDC__ de igual forma para ANSI C2.



IMPORTANTE.... en el libro pone solo %z pero es %zd. Segun la doc
z Specifies that a following d, i, o, u, x, X, or n conversion specifier applies to an argument with type pointer to size_t or the corresponding signed integer type.

Technically the bit size of a computer can refer to several things, such as the size of its CPU instructions or the amount of data the CPU can read from meory. The bit size is really the favored size of numbers that the computer can deal with.

You can avoid the compiler making assumptions by explicitly telling it what functions it should expect.
Split the declaration from the definition
A declaration has no body code and tells the compiler what return value to expect. 
It is just a function SIGNATURE.
C allows you to put the list of declarations at the beginning of your program code or even better. take the whole set of declarations out of the code into a HEADER FILE
#include "totaller.h"

When the compiler sees an include line with angle brackets it assumes it will find the header file somewhere off in the directories where the library code lives. 
By wrapping the header filename in quotes, you are telling the compiler to look for a local file.

#include IS A PREPROCESSOR INSTRUCTION

If you use a function you havent declared before, there will be a warning, because you havent ceclared it. The program will still work because it wil guess the function returns an int.

So I dont need to have declarations for int functions
The compiler just does the compilation step: converts the C source code into assembly code. gcc does preprocessing and compilation

On a unix style operating system the header files are normally in places like /usr/local/include

If the compiler finds a call to a function it hasnt heard of, it will assume the function returns an int

XOR: ^
*message = *message ^ 31;
This means you XOR each character with number 31

You can share code by putting it into a separate c file
You need toput the function declarations in a separate .h header file
include the header file in every c file that needs to use the shared code
list all the c files needed in the compiler command

gcc -c codigo.c
gcc *.o -o launchprogram

Automate your builds with the make tool....wooohooo
- the dependencies
- the recipe
Together the dependencies and the recipe form a rule. A RULE tells make all it needs toknow to create the target file

THE MAKE TOOL MAY HAVE A DIFFERENT NAME ON WINDOWS: because make came from the unix world there are different flavors of it available in Windows. MinGW includes a version of make called mingw32-make and Microsoft produce their own version called NMAKE
All of the details are stored in a file called makefile.
The recipes MUST begin with a TAB character

Make is most commonly used to compile code but it can also be used as a command line installer, or a source control tool. In fact you can use make for almost any task that you an perform on the command line.

you can speed up the compilation time by storing object code in *.o files


...........................................................STRUCTURES............................................

Combine the basic dada types into structs and even handle lifes undertainties with uniones
If you are after a simple yes or no, maybe bitfields is just what you need.

the word struct is short for structured data type.

const char * is used for strings that you dont want to change. That means it is often used to record string literals

Wrapping parameters in a struct makes your code more stable
You'll get an error if you try to read a struct field like it's an array
THE ONLY WAY TO ACCESS THEM IS BY NAME. You can use this using the '.' operator

An struct is not a pointer, is a name for the struct itself
Struts are similar to classes in other languages, but it's not so easy to add methods to struts

When you define a struct you are NOT telling the computer to create anything in memory. You are just giving a TEMPLATE
The assignment copies the pointers to strings, not the strings themselves... WATCH IT!!
WHEN YOU DEFINE A NEW VARIABLE THE COMPUTER NEEDS TO CREATE SPACE IN MEMORY FOR AN INSTANCE OF THE STRUCT
When you assign a struct to another variable the compuer will create a brand new copy of the strucct

WHEN YOU ARE ASSIGNING STRUCT VARIABLES YOU ARE TELLING THE COMPUTER TO COPY DATA

Once you have combined structs together you can access the fields using a chain of '.' operators

You can give your struct a proper name using TYPEDEF. It's really an alias for the struct. If you add the word typedef before the struct keywords and a typeName after the closing brace.
the compiler is quite happy for you to skip the struct name and just define an alias

A struct is a data type made from a sequence of other data types
Structs are fixed length
Struct fields are accessed by name using the <Struct>.<fieldname> syntax (aka dot notatio).
Struct fields are stored in memory in the same order they appear in the code
You can nest structs
typedef creates an alias for a data type
if you use typedef with a struct then you can skip giving the struct a name

IN C, ALL ASSIGNMENTS COPY DATA, IF YOU WANT TO COPY A REFERENCE TO A PIECE OF DATA YOU SHOULD ASSIGN A POINTER.

In C parameters are passed to functions by value
Remember when you assign structs in C the values are copied
To be able to update it, you need a pointer to the struct

The computer evaluates the . operator before it evaluates the *

`````remember
when you passed a variable to the scanf() function you had to pass a POINTER
scanf("%f", &length_of_run);
``````````````
t->age means (*t).age

t->age means, the age field in the struct that t points to

When you call a function the values are copied to the parameter variables
you can create pointers to structs just like any other type
pointer->field is the same as (*pointer).field
The -> notation cuts down on parentheses and makes the code more readable

A union lets you reuse memory space.
Computer will give the union enough space for its largest field and then leave it up to you which value you will store
quantity(might be a float or a short)
typedef union{
	short count;
	float weight;
	float volume;
} quantity;

quantity q = {4};
quantity q = {.weight=1.5};
q.volume = 3.7;

There will only ever be one piece of data store. The UNION just gives you a way of creating a variable that supports SEVERAL DIFFERENT DATA TYPES.

Objective C supports designated initializers but C++ does not

Designated initializers allow you to set STRUCT and UNION fields by name and are part of the C99 C standard
They are very useful when you just want to set up a few of the fields of a struct.

you can store lots of possible values in a union but you have NO WAY of knowing what type it was once stored.
One trick that some C coders use is to reate an enum.

enum colors {RED, GREEN, BLUE};
enum colors favorite = RED;

structs and unions separate items with semicolons but enums use commas

C doesnt support binary lierals, but support hexadecimal literals
int x = 0x56;

A bitfield lets you specify how many bits an individual field will store
If you have a sequence of bitfields the computer can squash them together to save space.
Bitfields can save space if they are collected together IN A STRUCT but if the compiler finds a single bitfield on its own it might still have to pad it out to the size of a word. That's why bitfields are usually grouped together

A designated initializer sets a field value by name
Designated initializers are part of the C99 standard. They are not supported in C++;
If you declare a union with a value in {braces}, it will be stored with the type of the first field
enums store symbols
Bitfields allow you to store a field with a custom numnber of bits
BITFIELDS SHOULD BE DECLARED AS UNSIGNED INT.

...........................................................BRIDGES: malloc & free............................................

Linked Lists are like chains of data
A linked list is an example of an abstract structure
Another advantadge linked lists have over arryas: inserting data is very quick.
A struct that contains a link to another struct of the same type is called a recursive structure.

RECURSIVE STRUCTURES NEED NAMES: If you use the typedef command, you can normally skip giving the struct a proper name. But in a recursive structure, YOU NEED TO INCLUDE A POINTER TO THE SAME TYPE.
C syntax wont let you use the typedef alias, so you need to give the struct a proper name. That's why the struct here is called struct island.
yourself

A struct cannot contain a whole recursive struct inside itself. 
C needs to know the exact amount of space an struct will occupy in memory. If it allowed full recursive copies of the same struct then one piede of data would be a different size than another.
C dYou have to create them 

Declaring a variable half way throught the function is only allowed in C99 and C11.
In ANSI C you need to declare all your local variables at the top of the function.

Most of the memory we've been using so far has been in the stack. The stack is the area of memory that's used for local variables. Each piece of data is stored in a variable, and each variable disappears as soon as you leave its function.
The trouble is, it's harder to get more storage on the stack at runtime, and that's where the heap comes in. The heap is the place where a program stores data that will need to be available longer term. It wont automatically get cleared away so that means it's the perfect place to store data structures like our linked list. You can think of the heap storage as being like reserving a locker in a locker room

MEMORY ALLOCATION: MALLOC() function will give you a pointer to the space in the heap. When you are finished with the storage you need to release the memory using the FREE() function
The heap has only a fixed amount of storage available, so be sure you use it wisely.
===> #include <stdlib.h>
===> island *p = malloc(sizeof(island)) ==> bytes
===> free(p)
Malloc returns a general purpose pointer with type void*

Developers created a function in string.h called strdup()
char *copy = strdup(str);
It works out how long the tring is and then calls the malloc function to allocate the correct number of characters on the heap
STRDUP will always create space ON THE HEAP. It cannot create space on the stack because that's for local variables. So you need to remember to release their storage with free()

String literals are stored in a read-only area of memory set aside for constant values. When you set to constant values you dont need to take a defensive copy of them, because they'll never change.

DYNAMIC MEMORY ALLOCATION LETS YOU CREATE THE MEMORY YOU NEED AT RUNTIME. And the way you access dynamic heap memory is with malloc() and free()

You dont NEED TO clear your data before the program ends. The operating system will clear away all of the memory when the program exits. But it's good practice to aways explicitely free anything you have created.

Dynamic data structures allow you to store a variable number of data items
A linked list is a data structure that allow you to easily insert items
Dynamic data structures are normally defined in C with recursive structs
A recursive struct contains one or more pointers to a similar struct.
The stack is used for local variables and is managed by the computer
The heap is used for long term storage. You allofcate space with malloc()
The sizeof operator will tell you how much space a struct needs
Data will stay on the heap until you release it with free()

Other data structure solutions:
- Linked lists: can be used to store a sequence of items and make it easier to insert new items. But can be processed only in 1 direction
- Associated array or map: It can be used to associate two different types of data. For example to associate peoples name to their phone numbers
- Doubly linked list: It's like a normal linked list but it has connections going both ways. Each item connects to up to two other items and can be processed in two directions
- Binary tree: each item can connect up to two other items. Useful for storing hierarchical information.

It is really ikmportant to learn to track down and fix memory leaks in your code.

MEMORY LEAKS......
C hackers have written tools that can help. One tool used on the linux operating system is called valgrind
Valgrind can monitor piedes of data that are allocated space on the heap. It works by creating its own fake version of malloc()
Make sure the executable contains debug information: ie line numbers
To add debug information to your executable you need to recompile the source with the -g switch
>> gcc -g spies.c -o spies

>> valgrind --leak-check=full ./spies

if x->y is already pointing to some data on the heap, free that before allocating a new question
free(x->y)
x->y=strdup(newy)

LEAKS dont happen when data is created, it happens when the program loses all references to the data
Valgrind is the name of the entrance to Valhalla. Valgrind(the program) gives you the access to the computer's heap

Valgrind checks for memory leaks
Valgrind works by intercepting the calls to malloc() and free()
When a program stops running valgrind prints details of what's left on the heap
If you compile your code with debug information, valgrind can give you more information
If you run your program several times you can narrow the search for the leak
valgrind can tell you which lines of code in your source put the data on the heap <--------------------------------------NICE
valgrind can be used to check that you have fixed a leak


...........................................................VARIADIC FUNCTIONS............................................
Passing functions as arguments to other functions
You need to work with function pointers
Every function name is a pointer to the function. The are stored in the constants part of the memory.
When you create a function fx(z) you are also creating a pointer variable called fx that contains the address of the function.

Unfortunately C doesnt have a 'function' data type, so you cant declare a function pointer with anything like function *.

char** is a pointer normally used to point to an array of strings.

int (*warp_fn)(int);
warp_fn=go_to_warp_speed;
warp_fn(4);

RETURN TYPE (*POINTER VARIABLE)(PARAM TYPES)
char** (*names_fn)(char*, int)

>> Use function pointers to set the order
the C standard library has a sort function that accepts a pointer to a COMPARATOR FUNCTION: QSORT function

qsort(void *array, 
		size_t length,
		size_t item_size,
		int (*compar)(const void *, const void *));

REMEMBER A VOID* POINTER CAN POINT TO ANYTHING

QSORT doesnt make a copy, it actually modifies the original array

Arrays of function pointers are designed to make your code scalable by making it shorter and easier to extend.

Function pointers store the addresses of functions
The name of each function is actually a function pointer.
If you have a function shoot() then 'shoot' and &shoot are both pointers to that function
You declare a new function pointer with return-type (*var-name) (param-types)
If fp is a function pointer you can call it with fp(params,...)
Or you can use (*fp)(params...). C will work the same way
The C standard library has a sorting function called qsort
qort() accepts a pointer to a comparator function that can test for (in)equality
The comparator function will be passed pointers to two items in the array being sorted
If you have an array of data you can associate functions with each data item using function pointer arrays.


#####new one... #include <stdarg.h>
A function that takes a variable number of parameters is called a variadic function.
The C Standard Library contains a set of macros that can help you create your own variadic functions.

FUNCTIONS VS MACROS
A MACRO is used to rewrite your code before it's compiled. The macros you are using here(va-sart, va_arg and va_end) might look like functions but they actually hide secret instructions that tell the preprocessor how to generate lots of extra smart code inside your program, just before compiling it.

You cannot have a function with just variable arguments and not fixed at all. You need to have at least one fixed argument in order to pas its name to va_start

Functions that accept variable number of arguments are called VARIADIC FUNCTIONS
To create variadic functions you need to include the stdarg.h header file
The variable arguments will be stored in a va_list
UYou can control the va_list using va_start(), va_arg(), and va_end().
You will need at least one fixed parameter.
Be careful that you dont try to read more parameters that you've been given
You will always need to know the data type of every parameter you read


...........................................................LIBRARIES............................................
Angle brackets are for standard headers.

standard header directories are for example:
- /usr/local/include
- /usr/include
- C:\MinGW\include
There are two sets of files that you want to share between programs. The .h header files and the .o object files
- Sharing .h header files
	- Store them in a standard directory
	- Put the full pathname in your include statement.
	- Tell the compiler where to find them: gcc -I/myheader_files test.c .... -o testexec
	The -I option tells the gcc. compiler that there is another place where it can find header files
- Sharing .o object files
	- by using the full pathname when compiling
	- An ARCHIVE contains .o files (.a files)
		- nm libl.a // to look inside them
		- ar -rcs libhfsecurity.a encrypt.o checksum.o
		- All .a files are like lib<somethign>.a That's the standar way. Begin with lib because they are STATIC libraries.
		- STORE:
			- in the standard directory like /usr/local/lib
			- custom directory my_lib
		- COMPILE
			- gcc test_code.c -L/my_lib -l<somethign> -o test_code
				- The name that follows the -l option needs to match part of the archive name.



encrypt.o : encrypt.c
	gcc -c encrypt.c -o encript.o

checksum.o : checksum.c
	gcc : -c checksum.c -o checksum.o

libhfsecurity.a: encrypt.o checksum.o
	ar -rcs libhfsecurity.a encrypt.o checksum.o

bank_vault : banckvault.c libhfsecurity.a
	gcc backvault.c -I . -L . lhfsecurity -o bank_vault

Indicate -I because header files are in the "." directory
Indicate -L because the archive is in current directory

If i've created a library archive, I can see what's inside with "ar -t <filename>"
Files are not linked together in the archive like an executable. They are stored as distinct files
I cannot put any kind of files in a library archive. The ar command will check the type before including it
To extract an object from te archive use "ar -x libhfsecurity.a encrypt.o"










